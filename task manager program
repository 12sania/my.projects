
# Notes: 
# 1. Use the following username and password to access the admin rights 
# username: admin
# password: password
# 2. Ensure you open the whole folder for this task in VS Code otherwise the 
# program will look in your root directory for the text files.
#reference; many mentors including Ronny advised on amendements to the code
#=====importing libraries===========
import os

from datetime import datetime, date

DATETIME_STRING_FORMAT = "%Y-%m-%d"



# Create tasks.txt if it doesn't exist
if not os.path.exists("tasks.txt"):
    with open("tasks.txt", "w") as default_file:
        pass

with open("tasks.txt", 'r') as task_file:
    task_data = task_file.read().split("\n")
    task_data = [t for t in task_data if t != ""]
    
#print(task_data)
task_list = []
for t_str in task_data:
    #created dict empty one, they put a dictionary in a list, nested list
    curr_t = {}

    # Split by semicolon and manually add each component
    task_components = t_str.split(";")
    curr_t['username'] = task_components[0]
    curr_t['title'] = task_components[1]
    curr_t['description'] = task_components[2]
    curr_t['due_date'] = task_components[3]
    curr_t['assigned_date'] = task_components[4]
    curr_t['completed'] = task_components[5] 

    task_list.append(curr_t)
#print(task_list)

print(task_list)
#====Login Section====
'''This code reads usernames and password from the user.txt file to 
    allow a user to login.
'''
 #If no user.txt file, write one with a default account
if not os.path.exists("user.txt"):
    with open("user.txt", "w") as default_file:
        default_file.write("admin;password")

# Read in user_data
with open("user.txt", 'r') as user_file:
    user_data = user_file.read().split("\n")

# Convert to a dictionary
username_password = {}
for user in user_data:
    username = user.split(';')
    #print(user_data)
    password = user.split(';')
    
    username_password[username[0]] = username[1]

logged_in = False
while not logged_in:

    print("LOGIN")
    curr_user = input("Username: ")
    curr_pass = input("Password: ")
    print(username_password)
    if curr_user not in username_password.keys():
        print("User does not exist")
        continue
    elif username_password[curr_user] != curr_pass:
        print("Wrong password")
        continue
    else:
        print("Login Successful!")
        logged_in = True

def reg_user():
    '''Add a new user to the user.txt file'''
    while True:
        # - Request input of a new username
        new_username = input("New Username: ")
        # - Checking if user exists.
        if new_username not in username_password.keys():
 
        # - Request input of a new password
            while True:
                new_password = input("New Password: ")

                # - Request input of password confirmation.
                confirm_password = input("Confirm Password: ")

                # - Check if the new password and confirmed password are the same.
                if new_password == confirm_password:
                # - If they are the same, add them to the user.txt file,
                    print("New user added")
                    username_password[new_username] = new_password
            
                    with open("user.txt", "a") as out_file:


                        out_file.write("\n"+ new_username + ";" + new_password)
                        return

        # - Otherwise you present a relevant message.
                else:
                    print("Passwords do no match")
                    break
        

        else:
             print('username not available, please enter another username')
       
#add_task function created

def add_task():
    '''Allow a user to add a new task to task.txt file
        Prompt a user for the following: 
            - A username of the person whom the task is assigned to,
            - A title of a task,
            - A description of the task and 
            - the due date of the task.'''
    while True:
        task_username = input("Name of person assigned to task: ")
        if task_username not in username_password.keys():
            print("Please enter valid username")
            
        else:
            task_title = input("Title of Task: ")
            task_description = input("Description of Task: ")
            while True:
                try:
                    task_due_date = input("Due date of task (YYYY-MM-DD): ")
                    due_date_time = datetime.strptime(task_due_date, DATETIME_STRING_FORMAT)
                    break

                except ValueError:
                    print("Invalid datetime format. Please use the format specified")
            task_completed = input('Has task been completed, enter yes or no: ')

            break

    # Then get the current date.
    curr_date = date.today()
    ''' Add the data to the file task.txt and
            Include 'No' to indicate if the task is complete.'''
    new_task = {
        "username": task_username,
        "title": task_title,
        "description": task_description,
        "due_date": due_date_time,
        "assigned_date": curr_date,
        "completed": task_completed
         }

    task_list.append(new_task)
    with open("tasks.txt", "w") as task_file:
        task_list_to_write = []
        for t in task_list:
            str_attrs = [
                t['username'],
                t['title'],
                t['description'],
                t['due_date'].strftime(DATETIME_STRING_FORMAT),
                t['assigned_date'].strftime(DATETIME_STRING_FORMAT),
                t['completed'] 
            ]
            task_list_to_write.append(";".join(str_attrs))
        task_file.write("\n".join(task_list_to_write))
    print("Task successfully added.")




def view_all():
     
        #Reads the task from task.txt file and prints to the console in the 
          # format of Output 2 presented in the task pdf (i.e. includes spacing
           #and labelling) 
        
        count = 0
        for t in task_list:
            count += 1
            print(count)
            disp_str = f"Task: \t\t {t['title']}\n"
            disp_str += f"Assigned to: \t {t['username']}\n"
            disp_str += f"Date Assigned: \t {t['assigned_date']}\n"
            disp_str += f"Due Date: \t {t['due_date']}\n"
            disp_str += f"Task Description: \n {t['description']}\n"
            print(disp_str)

def view_mine():
    
        '''Reads the task from task.txt file and prints to the console in the 
           format of Output 2 presented in the task pdf (i.e. includes spacing
           and labelling)
        '''
    
        
       # num = 0
        for index, t in enumerate(task_list) :
            if t['username'] == curr_user:
                
                print ('task number: '+  str(index))
                
                
                disp_str = f"Task: \t\t {t['title']}\n"
                disp_str += f"Assigned to: \t {t['username']}\n"
                disp_str += f"Date Assigned: \t {t['assigned_date']}\n"
                disp_str += f"Due Date: \t {t['due_date']}\n"
                disp_str += f"Task Description: \n {t['description']}\n"
                print(disp_str)

        menu= int(input('''select one of the options below:
        -1 - to return to main menu :
        1 - to select a task  :'''))
       

        if menu == 1:
                selected_task = int(input("which task would you like to edit or mark as complete, enter a number:"))

                operation_selected = input ('''select one of the options below:
                1- edit a task :
                2- mark task as complete : ''')

                if operation_selected == '1':
                    
                    edited_user = input('Please enter username to whom task should be assigned:')
                    edited_due_date = input("Due date of task (YYYY-MM-DD): ")
                    
                    task_list [selected_task]['username'] = edited_user
                    task_list [selected_task]['due_date'] = edited_due_date
                    print(task_list)
                    save_changes()
                    print(task_list)


                elif operation_selected == '2':
                    
                    
                    print('selected task has been marked as complete')
                    task_list[selected_task]['completed']= ['yes']
                    save_changes()
                    print(task_list)

               
                        
        elif menu == -1:
             pass

        else:
                print("not a valid selection, please try again")


#reference: stack overflow, helped to develop logic for this function
def display_stats():
   
     if curr_user == "admin":
        if not os.path.exists("tasks.txt"):
            generate_task_report()   
        with open("task_overview.txt", "r") as task_data:
            print("task overview statistics are:")

           

            task_information = task_data.read()
            print(task_information)
            
            pass
        if not os.path.exists("user.txt"):
            generate_user_report()    
   
        with open("user_overview.txt", "r") as user_data:
            print("user overview statistics are:")

        
            user_information = user_data.read()
            user_data.seek(0)
            print(user_information)
            pass
    
def generate_task_report():
    # Function to generate task report
    # First calculating the necessary statistics
    num_users = len(username_password.keys())
    num_tasks = len(task_list)
    completed_tasks = 0
    overdue_tasks = 0
    for t in task_list:
        if t['completed'] == 'yes':
            completed_tasks += 1
        elif datetime.date(t['due_date']) < date.today() and t['completed'] == 'no':
            overdue_tasks += 1
    incomplete_tasks = num_tasks - completed_tasks
    
    percentage_incomplete = incomplete_tasks /len(task_list)* 100
    percentage_overdue = overdue_tasks /len(task_list) * 100
    #The  report creates file with summary about tasks.
    with open("task_overview.txt", "w") as task_overview:
       

        task_overview.write(f"Total number of tasks generated using Task Manager: {len(task_list)}\n")
        task_overview.write(f"Number of completed tasks: {completed_tasks}\n")
        task_overview.write(f"Number of incomplete tasks: {incomplete_tasks}\n")
        task_overview.write(f"Number of incomplete tasks that are overdue: {overdue_tasks}\n")
        task_overview.write(f"Percentage of incomplete tasks: {percentage_incomplete:.0f}%\n")
        task_overview.write(f"Percentage of incomplete overdue tasks: {percentage_overdue:.0f}%\n")
        task_overview.write(f"-------------------------------------------------------------------------------------\n")
        print("Task report generated and written to the file Task_overview.txt")

       

def generate_user_report():
    num_users = len(username_password.keys())
    num_tasks = len(task_list)
    with open("user_overview.txt", "w") as user_overview:
       
        user_overview.write( f"The total number of users:\t{num_users}\n")
        user_overview.write( f"The total number of tasks:\t{num_tasks}\n")
       
        for user in username_password:
            user_task = 0
            user_completed_tasks = 0
            user_overdue_tasks = 0
          
            user_overview.write( f"|{user}\n")
           
            for task in task_list:
                if task['username'] == user:
                    user_task += 1
                    if task['completed'] == 'yes':
                        user_completed_tasks += 1
                    elif datetime.date(task['due_date']) < date.today() and task['completed'] == 'no':
                        user_overdue_tasks += 1 

            user_incomplete_tasks = user_task - user_completed_tasks

            if user_task > 0:
                percentage_user_of_total_tasks = (user_task/num_tasks)*100
                percentage_user_completed = user_completed_tasks/user_task*100
                percentage_user_incomplete = (user_task- user_completed_tasks)/user_task*100
                percentage_user_overdue = user_overdue_tasks/user_task*100
            else:
                percentage_user_of_total_tasks = 0
                percentage_user_completed = 0
                percentage_user_incomplete = 0
                percentage_user_overdue = 0 
            
            user_overview.write(f"Total number of tasks generated using Task Manager for the user: {user_task}\n")
            user_overview.write(f"Percentage of total tasks assigned to the user: {percentage_user_of_total_tasks}\n")
            user_overview.write(f"Number of completed tasks by the user: {user_completed_tasks}\n")
            user_overview.write(f"Number of incomplete tasks for the user: {user_incomplete_tasks}\n")
            user_overview.write(f"Number of incomplete tasks that are overdue for the user: {user_overdue_tasks}\n")
            user_overview.write(f"Percentage of incomplete tasks for the user: {percentage_user_incomplete:.0f}%\n")
            user_overview.write(f"Percentage of incomplete overdue tasks for the user: {percentage_user_overdue:.0f}%\n")
            user_overview.write(f"-------------------------------------------------------------------------------------\n")
       
        print('User report generated and saved to the file \"user_overview.txt\" succesfully.')       


#reference: mentor Ronny advised on creating a seperate function for saving changes to the program
def save_changes():
    #Additional function to save changes while editing or marking task completed
    with open("tasks.txt", "w") as edited_task_file:
        edited_task_list_to_write = []
        for t1 in task_list:
            edited_str_attrs = [
                t1['username'],
                t1['title'],
                t1['description'],
                t1['due_date'],
                t1['assigned_date'],
                "Yes" if t1['completed'] else "No"
                 
            ]
            
        username1 = t1['username']
        title1 = t1['title']
        description1 = t1['description']
        due_date1 = t1['due_date']
        assigned_date1 = t1['assigned_date']
        completed1 = t1['completed']
        
        edited_task_file.write('\n'+  username1 + ';' + title1 + ';' + description1+ ';' + str(due_date1) + ';' + str(assigned_date1) + ';' + completed1 )
# Create tasks.txt if it doesn't exist
if not os.path.exists("tasks.txt"):
    with open("tasks.txt", "w") as default_file:
        pass

with open("tasks.txt", 'r') as task_file:
    task_data = task_file.read().split("\n")
    task_data = [t for t in task_data if t != ""]


task_list = []
for t_str in task_data:
    curr_t = {}

    # Split by semicolon and manually add each component
    task_components = t_str.split(";")
    curr_t['username'] = task_components[0]
    curr_t['title'] = task_components[1]
    curr_t['description'] = task_components[2]
    curr_t['due_date'] = datetime.strptime(task_components[3], DATETIME_STRING_FORMAT)
    curr_t['assigned_date'] = datetime.strptime(task_components[4], DATETIME_STRING_FORMAT)
    curr_t['completed'] = 'yes' if task_components[5] == "yes" else 'no'

    task_list.append(curr_t)

            


     
while True:
    
    menu = input('''Select one of the following Options below:
r - Registering a user
a - Adding a task
va - View all tasks
vm - View my task
gr - generate reports
ds - Display statistics
e - Exit
: ''').lower()
    
    
    if menu == 'r':
        reg_user()

    elif menu == 'a':
        add_task()

    elif menu == 'va':
              
        view_all()

    elif menu == 'vm':
        view_mine()

    elif menu == 'gr':
        generate_task_report()
        generate_user_report()
        

    elif menu == 'e':
        print('Goodbye!!!')
        exit()

    elif menu == 'ds' and curr_user == 'admin': 
        #generate_task_report()
        #generate_user_report()
        display_stats()
        '''If the user is an admin they can display statistics about number of users
            and tasks.'''
         
        num_users = len(username_password.keys())
        num_tasks = len(task_list)

        print("-----------------------------------")
        print(f"Number of users: \t\t {num_users}")
        print(f"Number of tasks: \t\t {num_tasks}")
        print("-----------------------------------")    
    else:
        print("You have made a wrong choice, Please Try Again")









   
            


    
                
    
   
    
